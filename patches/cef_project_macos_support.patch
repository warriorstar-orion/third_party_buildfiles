diff --git a/examples/shared/main_mac.mm b/examples/shared/main_mac.mm
index 394c474..2b89501 100644
--- a/examples/shared/main_mac.mm
+++ b/examples/shared/main_mac.mm
@@ -6,111 +6,16 @@
 #include "examples/shared/main.h"
 
 #import <Cocoa/Cocoa.h>
+#import "include/wrapper/cef_library_loader.h"
+#import "examples/shared/shared_application.h"
+#import "examples/shared/shared_app_delegate.h"
 
 #include "include/cef_application_mac.h"
 #include "include/wrapper/cef_helpers.h"
-#import "include/wrapper/cef_library_loader.h"
 
 #include "examples/shared/app_factory.h"
 #include "examples/shared/client_manager.h"
 
-// Receives notifications from the application.
-@interface SharedAppDelegate : NSObject<NSApplicationDelegate>
-- (void)createApplication:(id)object;
-- (void)tryToTerminateApplication:(NSApplication*)app;
-@end
-
-// Provide the CefAppProtocol implementation required by CEF.
-@interface SharedApplication : NSApplication<CefAppProtocol> {
- @private
-  BOOL handlingSendEvent_;
-}
-@end
-
-@implementation SharedApplication
-- (BOOL)isHandlingSendEvent {
-  return handlingSendEvent_;
-}
-
-- (void)setHandlingSendEvent:(BOOL)handlingSendEvent {
-  handlingSendEvent_ = handlingSendEvent;
-}
-
-- (void)sendEvent:(NSEvent*)event {
-  CefScopedSendingEvent sendingEventScoper;
-  [super sendEvent:event];
-}
-
-// |-terminate:| is the entry point for orderly "quit" operations in Cocoa. This
-// includes the application menu's quit menu item and keyboard equivalent, the
-// application's dock icon menu's quit menu item, "quit" (not "force quit") in
-// the Activity Monitor, and quits triggered by user logout and system restart
-// and shutdown.
-//
-// The default |-terminate:| implementation ends the process by calling exit(),
-// and thus never leaves the main run loop. This is unsuitable for Chromium
-// since Chromium depends on leaving the main run loop to perform an orderly
-// shutdown. We support the normal |-terminate:| interface by overriding the
-// default implementation. Our implementation, which is very specific to the
-// needs of Chromium, works by asking the application delegate to terminate
-// using its |-tryToTerminateApplication:| method.
-//
-// |-tryToTerminateApplication:| differs from the standard
-// |-applicationShouldTerminate:| in that no special event loop is run in the
-// case that immediate termination is not possible (e.g., if dialog boxes
-// allowing the user to cancel have to be shown). Instead, this method tries to
-// close all browsers by calling CloseBrowser(false) via
-// ClientHandler::CloseAllBrowsers. Calling CloseBrowser will result in a call
-// to ClientHandler::DoClose and execution of |-performClose:| on the NSWindow.
-// DoClose sets a flag that is used to differentiate between new close events
-// (e.g., user clicked the window close button) and in-progress close events
-// (e.g., user approved the close window dialog). The NSWindowDelegate
-// |-windowShouldClose:| method checks this flag and either calls
-// CloseBrowser(false) in the case of a new close event or destructs the
-// NSWindow in the case of an in-progress close event.
-// ClientHandler::OnBeforeClose will be called after the CEF NSView hosted in
-// the NSWindow is dealloc'ed.
-//
-// After the final browser window has closed ClientHandler::OnBeforeClose will
-// begin actual tear-down of the application by calling CefQuitMessageLoop.
-// This ends the NSApplication event loop and execution then returns to the
-// main() function for cleanup before application termination.
-//
-// The standard |-applicationShouldTerminate:| is not supported, and code paths
-// leading to it must be redirected.
-- (void)terminate:(id)sender {
-  SharedAppDelegate* delegate =
-      static_cast<SharedAppDelegate*>([NSApp delegate]);
-  [delegate tryToTerminateApplication:self];
-  // Return, don't exit. The application is responsible for exiting on its own.
-}
-@end
-
-@implementation SharedAppDelegate
-
-// Create the application on the UI thread.
-- (void)createApplication:(id)object {
-  [NSApplication sharedApplication];
-  [[NSBundle mainBundle] loadNibNamed:@"MainMenu"
-                                owner:NSApp
-                      topLevelObjects:nil];
-
-  // Set the delegate for application events.
-  [[NSApplication sharedApplication] setDelegate:self];
-}
-
-- (void)tryToTerminateApplication:(NSApplication*)app {
-  shared::ClientManager* manager = shared::ClientManager::GetInstance();
-  if (manager && !manager->IsClosing())
-    manager->CloseAllBrowsers(false);
-}
-
-- (NSApplicationTerminateReply)applicationShouldTerminate:
-    (NSApplication*)sender {
-  return NSTerminateNow;
-}
-@end
-
 namespace shared {
 
 // Entry point function for the browser process.
diff --git a/examples/shared/resources/mac/Info.plist b/examples/shared/resources/mac/Info.plist
index 0cfb4b7..c564b5a 100644
--- a/examples/shared/resources/mac/Info.plist
+++ b/examples/shared/resources/mac/Info.plist
@@ -3,7 +3,7 @@
 <plist version="1.0">
 <dict>
 	<key>CFBundleDevelopmentRegion</key>
-	<string>English</string>
+	<string>en</string>
 	<key>CFBundleExecutable</key>
 	<string>${EXECUTABLE_NAME}</string>
 	<key>CFBundleIconFile</key>
diff --git a/examples/shared/resources/mac/helper-Info.plist b/examples/shared/resources/mac/helper-Info.plist
index 94716b3..c349bfd 100644
--- a/examples/shared/resources/mac/helper-Info.plist
+++ b/examples/shared/resources/mac/helper-Info.plist
@@ -8,8 +8,8 @@
 	<string>${EXECUTABLE_NAME}</string>
 	<key>CFBundleExecutable</key>
 	<string>${EXECUTABLE_NAME}</string>
-	<key>CFBundleIdentifier</key>
-	<string>org.cef.shared.helper${BUNDLE_ID_SUFFIX}</string>
+	<!-- <key>CFBundleIdentifier</key>
+	<string>org.cef.shared.helper${BUNDLE_ID_SUFFIX}</string> -->
 	<key>CFBundleInfoDictionaryVersion</key>
 	<string>6.0</string>
 	<key>CFBundleName</key>
diff --git a/examples/shared/shared_app_delegate.h b/examples/shared/shared_app_delegate.h
new file mode 100644
index 0000000..f2a170b
--- /dev/null
+++ b/examples/shared/shared_app_delegate.h
@@ -0,0 +1,14 @@
+#ifndef __THIRD_PARTY_CEF_PROJECT_EXAMPLES_SHARED_SHARED_APP_DELEGATE_H__
+#define __THIRD_PARTY_CEF_PROJECT_EXAMPLES_SHARED_SHARED_APP_DELEGATE_H__
+
+#import <Cocoa/Cocoa.h>
+#import "include/wrapper/cef_library_loader.h"
+
+// Receives notifications from the application.
+@interface SharedAppDelegate : NSObject<NSApplicationDelegate>
+- (void)createApplication:(id)object;
+- (void)tryToTerminateApplication:(NSApplication*)app;
+@end
+
+
+#endif // __THIRD_PARTY_CEF_PROJECT_EXAMPLES_SHARED_SHARED_APP_DELEGATE_H__
diff --git a/examples/shared/shared_app_delegate.mm b/examples/shared/shared_app_delegate.mm
new file mode 100644
index 0000000..688c207
--- /dev/null
+++ b/examples/shared/shared_app_delegate.mm
@@ -0,0 +1,28 @@
+#include "shared_app_delegate.h"
+
+#include "examples/shared/client_manager.h"
+
+@implementation SharedAppDelegate
+
+// Create the application on the UI thread.
+- (void)createApplication:(id)object {
+  [NSApplication sharedApplication];
+  [[NSBundle mainBundle] loadNibNamed:@"MainMenu"
+                                owner:NSApp
+                      topLevelObjects:nil];
+
+  // Set the delegate for application events.
+  [[NSApplication sharedApplication] setDelegate:self];
+}
+
+- (void)tryToTerminateApplication:(NSApplication*)app {
+  shared::ClientManager* manager = shared::ClientManager::GetInstance();
+  if (manager && !manager->IsClosing())
+    manager->CloseAllBrowsers(false);
+}
+
+- (NSApplicationTerminateReply)applicationShouldTerminate:
+    (NSApplication*)sender {
+  return NSTerminateNow;
+}
+@end
diff --git a/examples/shared/shared_application.h b/examples/shared/shared_application.h
new file mode 100644
index 0000000..d8d3514
--- /dev/null
+++ b/examples/shared/shared_application.h
@@ -0,0 +1,18 @@
+#ifndef __THIRD_PARTY_CEF_PROJECT_EXAMPLES_SHARED_SHARED_APPLICATION_H__
+#define __THIRD_PARTY_CEF_PROJECT_EXAMPLES_SHARED_SHARED_APPLICATION_H__
+
+#import <Cocoa/Cocoa.h>
+#import "include/wrapper/cef_library_loader.h"
+#import "shared_app_delegate.h"
+
+#include "include/cef_application_mac.h"
+
+// Provide the CefAppProtocol implementation required by CEF.
+@interface SharedApplication : NSApplication<CefAppProtocol> {
+ @private
+  BOOL handlingSendEvent_;
+}
+@end
+
+
+#endif // __THIRD_PARTY_CEF_PROJECT_EXAMPLES_SHARED_SHARED_APPLICATION_H__
diff --git a/examples/shared/shared_application.mm b/examples/shared/shared_application.mm
new file mode 100644
index 0000000..f3f4abe
--- /dev/null
+++ b/examples/shared/shared_application.mm
@@ -0,0 +1,60 @@
+#include "shared_application.h"
+
+@implementation SharedApplication
+- (BOOL)isHandlingSendEvent {
+  return handlingSendEvent_;
+}
+
+- (void)setHandlingSendEvent:(BOOL)handlingSendEvent {
+  handlingSendEvent_ = handlingSendEvent;
+}
+
+- (void)sendEvent:(NSEvent*)event {
+  CefScopedSendingEvent sendingEventScoper;
+  [super sendEvent:event];
+}
+
+// |-terminate:| is the entry point for orderly "quit" operations in Cocoa. This
+// includes the application menu's quit menu item and keyboard equivalent, the
+// application's dock icon menu's quit menu item, "quit" (not "force quit") in
+// the Activity Monitor, and quits triggered by user logout and system restart
+// and shutdown.
+//
+// The default |-terminate:| implementation ends the process by calling exit(),
+// and thus never leaves the main run loop. This is unsuitable for Chromium
+// since Chromium depends on leaving the main run loop to perform an orderly
+// shutdown. We support the normal |-terminate:| interface by overriding the
+// default implementation. Our implementation, which is very specific to the
+// needs of Chromium, works by asking the application delegate to terminate
+// using its |-tryToTerminateApplication:| method.
+//
+// |-tryToTerminateApplication:| differs from the standard
+// |-applicationShouldTerminate:| in that no special event loop is run in the
+// case that immediate termination is not possible (e.g., if dialog boxes
+// allowing the user to cancel have to be shown). Instead, this method tries to
+// close all browsers by calling CloseBrowser(false) via
+// ClientHandler::CloseAllBrowsers. Calling CloseBrowser will result in a call
+// to ClientHandler::DoClose and execution of |-performClose:| on the NSWindow.
+// DoClose sets a flag that is used to differentiate between new close events
+// (e.g., user clicked the window close button) and in-progress close events
+// (e.g., user approved the close window dialog). The NSWindowDelegate
+// |-windowShouldClose:| method checks this flag and either calls
+// CloseBrowser(false) in the case of a new close event or destructs the
+// NSWindow in the case of an in-progress close event.
+// ClientHandler::OnBeforeClose will be called after the CEF NSView hosted in
+// the NSWindow is dealloc'ed.
+//
+// After the final browser window has closed ClientHandler::OnBeforeClose will
+// begin actual tear-down of the application by calling CefQuitMessageLoop.
+// This ends the NSApplication event loop and execution then returns to the
+// main() function for cleanup before application termination.
+//
+// The standard |-applicationShouldTerminate:| is not supported, and code paths
+// leading to it must be redirected.
+- (void)terminate:(id)sender {
+  SharedAppDelegate* delegate =
+      static_cast<SharedAppDelegate*>([NSApp delegate]);
+  [delegate tryToTerminateApplication:self];
+  // Return, don't exit. The application is responsible for exiting on its own.
+}
+@end
