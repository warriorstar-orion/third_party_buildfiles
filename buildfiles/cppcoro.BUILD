load("@rules_cc//cc:defs.bzl", "cc_library")

package(default_visibility = ["//visibility:public"])

config_setting(
    name = "darwin",
    constraint_values = [
        "@bazel_tools//platforms:osx",
        "@bazel_tools//platforms:x86_64",
    ],
)

config_setting(
    name = "windows",
    values = {"cpu": "x64_windows"},
)

config_setting(
    name = "linux",
    constraint_values = [
        "@bazel_tools//platforms:linux",
    ],
)

cc_library(
    name = "cppcoro",
    srcs = [
        "lib/async_auto_reset_event.cpp",
        "lib/async_manual_reset_event.cpp",
        "lib/async_mutex.cpp",
        "lib/auto_reset_event.cpp",
        "lib/auto_reset_event.hpp",
        "lib/cancellation_registration.cpp",
        "lib/cancellation_source.cpp",
        "lib/cancellation_state.cpp",
        "lib/cancellation_state.hpp",
        "lib/cancellation_token.cpp",
        "lib/ip_address.cpp",
        "lib/ip_endpoint.cpp",
        "lib/ipv4_address.cpp",
        "lib/ipv4_endpoint.cpp",
        "lib/ipv6_address.cpp",
        "lib/ipv6_endpoint.cpp",
        "lib/lightweight_manual_reset_event.cpp",
        "lib/socket_helpers.hpp",
        "lib/spin_mutex.cpp",
        "lib/spin_mutex.hpp",
        "lib/spin_wait.cpp",
        "lib/spin_wait.hpp",
        "lib/static_thread_pool.cpp",
    ] + select({
        ":windows": [
            "lib/win32.cpp",
            "lib/io_service.cpp",
            "lib/file.cpp",
            "lib/readable_file.cpp",
            "lib/writable_file.cpp",
            "lib/read_only_file.cpp",
            "lib/write_only_file.cpp",
            "lib/read_write_file.cpp",
            "lib/file_read_operation.cpp",
            "lib/file_write_operation.cpp",
            "lib/socket_helpers.cpp",
            "lib/socket.cpp",
            "lib/socket_accept_operation.cpp",
            "lib/socket_connect_operation.cpp",
            "lib/socket_disconnect_operation.cpp",
            "lib/socket_send_operation.cpp",
            "lib/socket_send_to_operation.cpp",
            "lib/socket_recv_from_operation.cpp",
            "lib/socket_recv_operation.cpp",
        ],
        "//conditions:default": [],
    }),
    hdrs = [
        "include/cppcoro/async_auto_reset_event.hpp",
        "include/cppcoro/async_generator.hpp",
        "include/cppcoro/async_latch.hpp",
        "include/cppcoro/async_manual_reset_event.hpp",
        "include/cppcoro/async_mutex.hpp",
        "include/cppcoro/async_scope.hpp",
        "include/cppcoro/awaitable_traits.hpp",
        "include/cppcoro/broken_promise.hpp",
        "include/cppcoro/cancellation_registration.hpp",
        "include/cppcoro/cancellation_source.hpp",
        "include/cppcoro/cancellation_token.hpp",
        "include/cppcoro/config.hpp",
        "include/cppcoro/detail/any.hpp",
        "include/cppcoro/detail/get_awaiter.hpp",
        "include/cppcoro/detail/is_awaiter.hpp",
        "include/cppcoro/detail/lightweight_manual_reset_event.hpp",
        "include/cppcoro/detail/manual_lifetime.hpp",
        "include/cppcoro/detail/remove_rvalue_reference.hpp",
        "include/cppcoro/detail/sync_wait_task.hpp",
        "include/cppcoro/detail/unwrap_reference.hpp",
        "include/cppcoro/detail/void_value.hpp",
        "include/cppcoro/detail/when_all_counter.hpp",
        "include/cppcoro/detail/when_all_ready_awaitable.hpp",
        "include/cppcoro/detail/when_all_task.hpp",
        "include/cppcoro/file.hpp",
        "include/cppcoro/file_buffering_mode.hpp",
        "include/cppcoro/file_open_mode.hpp",
        "include/cppcoro/file_read_operation.hpp",
        "include/cppcoro/file_share_mode.hpp",
        "include/cppcoro/file_write_operation.hpp",
        "include/cppcoro/fmap.hpp",
        "include/cppcoro/generator.hpp",
        "include/cppcoro/inline_scheduler.hpp",
        "include/cppcoro/io_service.hpp",
        "include/cppcoro/is_awaitable.hpp",
        "include/cppcoro/multi_producer_sequencer.hpp",
        "include/cppcoro/net/ip_address.hpp",
        "include/cppcoro/net/ip_endpoint.hpp",
        "include/cppcoro/net/ipv4_address.hpp",
        "include/cppcoro/net/ipv4_endpoint.hpp",
        "include/cppcoro/net/ipv6_address.hpp",
        "include/cppcoro/net/ipv6_endpoint.hpp",
        "include/cppcoro/on_scope_exit.hpp",
        "include/cppcoro/operation_cancelled.hpp",
        "include/cppcoro/read_only_file.hpp",
        "include/cppcoro/read_write_file.hpp",
        "include/cppcoro/readable_file.hpp",
        "include/cppcoro/recursive_generator.hpp",
        "include/cppcoro/resume_on.hpp",
        "include/cppcoro/round_robin_scheduler.hpp",
        "include/cppcoro/schedule_on.hpp",
        "include/cppcoro/sequence_barrier.hpp",
        "include/cppcoro/sequence_range.hpp",
        "include/cppcoro/sequence_traits.hpp",
        "include/cppcoro/shared_task.hpp",
        "include/cppcoro/single_consumer_async_auto_reset_event.hpp",
        "include/cppcoro/single_consumer_event.hpp",
        "include/cppcoro/single_producer_sequencer.hpp",
        "include/cppcoro/static_thread_pool.hpp",
        "include/cppcoro/sync_wait.hpp",
        "include/cppcoro/task.hpp",
        "include/cppcoro/when_all.hpp",
        "include/cppcoro/when_all_ready.hpp",
        "include/cppcoro/writable_file.hpp",
        "include/cppcoro/write_only_file.hpp",
    ] + select({
        ":windows": [
            "include/cppcoro/net/socket.hpp",
            "include/cppcoro/net/socket_accept_operation.hpp",
            "include/cppcoro/net/socket_connect_operation.hpp",
            "include/cppcoro/net/socket_disconnect_operation.hpp",
            "include/cppcoro/net/socket_recv_from_operation.hpp",
            "include/cppcoro/net/socket_recv_operation.hpp",
            "include/cppcoro/net/socket_send_operation.hpp",
            "include/cppcoro/net/socket_send_to_operation.hpp",
            "include/cppcoro/detail/win32.hpp",
            "include/cppcoro/detail/win32_overlapped_operation.hpp",
        ],
        "//conditions:default": [],
    }),
    copts = select({
        ":windows": [
            "/await",
            "/analyze:WX-",
            "/analyze:max_paths 512",
            "/std:c++17",
        ],
        ":darwin": [
            "-std=c++2a",
            "-fcoroutines-ts",
        ],
        ":linux": [
            "-fcoroutines",
        ],
    }),
    defines = select({
        ":windows": [
            "_SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING",
        ],
        "//conditions:default": [],
    }),
    linkopts = select({
        ":windows": [
            "/DEFAULTLIB:Ws2_32",
            "/DEFAULTLIB:Mswsock",
        ],
        "//conditions:default": [],
    }),
    strip_include_prefix = "include/",
)
